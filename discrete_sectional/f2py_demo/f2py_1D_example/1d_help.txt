

This Program is a wrapper for AJ Shaka's & Vladimir Mandelshtam's
fd_rr1d.f 1D NMR analysis program originally writ in Fortran,
trivially converted to a subroutine and thence converted, along
with its subsidiary Fortran subroutines via f2py (part of the numpy pkg).

The information included with the original Fortran is available
via the --help1d option, described below.

This program also writes hardware, network, user, runtime and load info
into a postgresql DB for later analysis.

NB: How parameters are passed to the fd_rr1d program:
1 - if a parameter file is supplied (--paramfile=./PAR_A.param), it will be
    consulted for all the parameters first.
2 - if commandline parameters are entered at the same time
    (--paramfile=./PAR_A.param --theta-3.452)
    then the commandline parameter will override the one given in the file.
3 - if neither the parameter file nor the commandline options provide a
    value for the parameter, the default value which is hard-coded in the
    python source will be consulted.
4 - all the parameters used will be written into the database for the run.


Usage: 1d.py [options]

where [options] are:

=== house-keeping options ===========================================

    -h (--help)
        Print this message and exit.

    --gui
       calls up the Graphical User Interface to set values.

    --help1d
       the extended help from the original Fortran, describing the options
       in more detail

    -D (--debug)
       set to debug

    -d (--dsn=)
       dsn string to use to connect to database in the form of
       --dsn="DB_name,DB_Server,port#,DB_user,DB_user_password"

    --nodb
       DO NOT conect to the DB (use for debugging if no db is available)

       NB: FOR SERVER ONLY: database has to exist already via 'createdb' and
       then it can be populated with the table(s) via the sql definition
       file as below:
       psql -U hjm [dbname] < definition.sql

==== fd_rr1d-specific options =======================================

    --paramfile="/path/to/parameter/file"
       If this option is used, the parameter file will be consulted for
       options first.
       the commandline option values will will be

    --signal="/path/to/signal/file"
       input data file with appropriate first line.

    --theta=float
       zero order (overall) phase correction

    --method="FDM" or "RRT" or"DFT"
       method used to compute the spectra:

    --Nsig=integer
       number of data points to be used in computing the spectra.

    --wmaxo=float
       specify the maximum value of the spectra to be computed.
       with the --wmino value, specifies the range of the spectra

    --wmino=float
       specify the mimimum value of the spectra to be computed.

    --par="/path/to/output/file"
       file where the linelist will be written (FDM only).
       Only those with |d(k)| > threshhold (below) will be output.

    --threshhold=float
       see par above

    --ReSp=="/path/to/output/file"
       file where Re[F(w)] will be written

    --ImSp=="/path/to/output/file"
       file where Im[F(w)] will be written

    --AbsSp=="/path/to/output/file"
       file where Abs[F(w)] will be written

    --rho=float
       basis density (default = 1.1)

    --Nb0=integer
       number of narrow band Fourier basis functions used per window

    --Nbc=integer
       number of broad band Fourier basis functions (coarse basis)

    --Nsp=integer
       number of points used in plotting the spectra

    --Gamm=float
       smoothing parameter. Defines the smallest possible linewidth.

    --cheat=float
       multiply all widths by cheat (FDM only)

    --cheatmore="T" or "F"
       if "T", F(w) is computed with Im d_k (FDM only). Default is "F"

    --ros=float
       regularization parameter (RRT only).

example in which most params are supplied by the file,
    with the commandline 'theta' overriding the file-supplied value

        ./1d.py --paramfile=./1d.param --theta=4.87

